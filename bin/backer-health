#! /usr/bin/env bash

message() {
    echo
    echo ----------------------------------------------
    echo "$@"
    echo ----------------------------------------------
    echo
}

DEPLOY_DIR=deployments/$(seth chain)
ADDRESS_DIR=$PWD/$DEPLOY_DIR
ADDRESS_FILE="$ADDRESS_DIR/addresses.json"

message Contracts

CURRENCY=$(cat $ADDRESS_FILE | jq  -r '.CURRENCY')
COLLATERAL=$(cat $ADDRESS_FILE | jq  -r '.COLLATERAL')
LENDER=$(cat $ADDRESS_FILE | jq  -r '.LENDER')
echo "Currency: $CURRENCY"
echo "Collateral: $COLLATERAL"
echo "Lender: $LENDER"


BACKER_ADDR="0x$(seth call $LENDER 'backer()(address)')"

message Backer Balances
echo "Backer Address: $BACKER_ADDR"
echo "ETH Balance: $(seth --from-wei $(seth balance $BACKER_ADDR)) ETH"

BALANCE=$(seth call $CURRENCY 'balanceOf(address)' $BACKER_ADDR)
echo "Backer Currency: $(seth --from-wei $(node <<< "console.log(parseInt('$BALANCE', 16))")) DAI"


BALANCE=$(seth call $COLLATERAL 'balanceOf(address)' $BACKER_ADDR)
echo "Backer Currency: $(seth --from-wei $(node <<< "console.log(parseInt('$BALANCE', 16))")) CVT"


message Approvals

BALANCE=$(seth call $CURRENCY 'allowance(address, address)' $BACKER_ADDR $LENDER)
echo "Backer allows the Lender to take Currency: $(seth --from-wei $(node <<< "console.log(parseInt('$BALANCE', 16))")) DAI"

BALANCE=$(seth call $COLLATERAL 'allowance(address, address)' $BACKER_ADDR $LENDER)
echo "Backer allows the Lender to take Collateral: $(seth --from-wei $(node <<< "console.log(parseInt('$BALANCE', 16))")) CVT"

