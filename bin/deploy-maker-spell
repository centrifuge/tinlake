#!/usr/bin/env bash
set -ex

DEPLOY_DIR=deployments/$(seth chain)
ADDRESS_DIR=$PWD/$DEPLOY_DIR
ADDRESS_FILE="$ADDRESS_DIR/addresses.json"

mkdir -p $ADDRESS_DIR 
BIN_DIR=${BIN_DIR:-$(cd "${0%/*}"&&pwd)}
OUT_DIR=${OUT_DIR:-$(cd "${0%/*}"&&pwd)/../out}

source "$ADDRESS_DIR/load-core-$(seth chain)"

export ETH_GAS=${ETH_GAS:-"7000000"}
export ETH_FROM=${ETH_FROM:-$(seth rpc eth_coinbase)}
export SOLC_FLAGS="--optimize"

# Set god address to 0 if not defined
test -z "$GOD_ADDR" && GOD_ADDR="0x00000000000000000000" 

source "$BIN_DIR/lib/load-addresses"
test -z "$MCD_ADDRESS_FILE" && echo "MCD_ADDRESS_FILE needs to be set" && exit 1;
loadAddresses $MCD_ADDRESS_FILE

copyAbis() {
  local lib; lib=$1
  mkdir -p "$OUT_DIR/abi"
  find "$DAPP_LIB/$lib/out" -name "*.abi" ! -name "*Test.abi" \
    -exec cp -f {} "$OUT_DIR/abi" \;
}

dappBuild() {
  [[ -n $DAPP_SKIP_BUILD ]] && return

  local lib; lib=$1
  (cd "$DAPP_LIB/$lib" || exit 1
    dapp "${@:2}" build
  )
}

dappCreate() {
  local lib; lib=$1
  local class; class=$2
  DAPP_OUT="$DAPP_LIB/$lib/out" dapp create "$class" "${@:3}"
  copyAbis "$lib"
}

DAPP_LIB="lib"
dappBuild "ds-value"
CVTPIP=$(dappCreate ds-value DSValue)
$(seth send $CVTPIP 'poke(bytes32)' "$(seth --to-bytes32 $(seth --to-uint256 $(echo "1*10^18" | bc)))")
$(seth send $CVTPIP 'setOwner(address)' $GOD_ADDR)

CVTILK="$(seth --to-bytes32 "$(seth --from-ascii "CVT")")"

CVTJOIN=$(dappCreate dss GemJoin "$MCD_VAT" "$CVTILK" "$COLLATERAL")
CVTFLIP=$(dappCreate dss Flipper "$MCD_VAT" "$CVTILK")
seth send "$CVTFLIP" 'rely(address)' "$MCD_PAUSE_PROXY"
seth send "$CVTFLIP" 'deny(address)' "$ETH_FROM"

LINE="$(seth --to-uint256 $(echo "5000000"*10^45 | bc))"
MAT="$(seth --to-uint256 $(echo "150"*10^25 | bc))"
DUTY="$(seth --to-uint256 1000000000315522921573372069)"
CHOP="$(seth --to-uint256 $(echo "110"*10^25 | bc))"
LUMP="$(seth --to-uint256 $(echo "1000"*10^18 | bc))"

dappBuild dss-add-ilk-spell

SPELL=$(seth send --create lib/dss-add-ilk-spell/out/DssAddIlkSpell.bin 'DssAddIlkSpell(bytes32,address,address[8] memory,uint256[5] memory)' $CVTILK $MCD_PAUSE ["${MCD_VAT#0x}","${MCD_CAT#0x}","${MCD_JUG#0x}","${MCD_SPOT#0x}","${MCD_END#0x}","${CVTJOIN#0x}","${CVTPIP#0x}","${CVTFLIP#0x}"] ["$LINE","$MAT","$DUTY","$CHOP","$LUMP"])

seth send "$MCD_ADM" 'etch(address[] memory)' ["${SPELL#0x}"]

# Give MKR to ETH_FROM
seth send "$MCD_GOV" 'approve(address,uint256)' "$MCD_ADM" 2
seth send "$MCD_ADM" 'lock(uint256)' 2
seth send "$MCD_ADM" 'vote(address[] memory)' ["${SPELL#0x}"]
seth send "$MCD_ADM" 'lift(address)' "$SPELL"
seth send "$SPELL" 'schedule()'
# Delay is 0, no need to wait
seth send "$SPELL" 'cast()'

source $BIN_DIR/lib/load-addresses
touch $ADDRESS_FILE
addAddresses $ADDRESS_FILE <<EOF
{
    "CVTILK" : "$CVTILK",
    "CVTPIP" : "$CVTPIP",
    "CVTJOIN": "$CVTJOIN",
    "SPELL"  : "$SPELL"
}
EOF
